# vim: set ft=ansible:
---
- name: Create group for infra hosts in this env only
  hosts: localhost
  gather_facts: no
  connection: local
  sudo: no
  vars:
    infra_hosts: "{{ groups['tag_openshift-demo-' ~ cluster_id ~ '-host-type_node'] | intersect(groups['tag_openshift-demo-' ~ cluster_id ~ '-node-type_infrastructure']) }}"
  tasks:
  - add_host:
      name: "{{ infra_hosts.0 }}"
      groups: oo_infra_nodes

- name: Create group for demo hosts in this env only
  hosts: localhost
  gather_facts: no
  connection: local
  sudo: no
  vars:
    demo_hosts: "{{ groups['tag_openshift-demo-' ~ cluster_id ~ '-host-type_node'] | intersect(groups['tag_openshift-demo-' ~ cluster_id ~ '-node-type_application']) }}"
  tasks:
  - add_host:
      name: "{{ demo_hosts.0 }}"
      groups: oo_demo_nodes

- name: Verify node host groups have core ansible facts
  hosts: oo_infra_nodes:oo_demo_nodes

- name: Node post config
  hosts: oo_nodes_to_config
  vars_files:
  - ../vars.yml
  tasks:
  - lineinfile:
      dest: /etc/resolv.conf
      insertbefore: ^nameserver 172.18.*$
      line: nameserver {{ hostvars[groups.oo_first_master.0].openshift.common.dns_ip | default('172.30.0.1') }}
      state: present

  - lineinfile:
      dest: /etc/dhcp/dhclient-eth0.conf
      line: prepend domain-name-servers {{ hostvars[groups.oo_first_master.0].openshift.common.dns_ip | default('172.30.0.1') }}
      state: present
      create: yes

  - name: pre-pull images
    command: "docker pull {{ item }}"
    with_items: preload_images

- name: Master auth config
  hosts: oo_masters_to_config
  vars_files:
  - ../vars.yml
  tasks:
  - name: Create the default users
    command: "htpasswd -b /etc/origin/master/htpasswd {{ item.user }} {{ default_password }}"
    with_items: users

- name: First master post config
  hosts: oo_first_master
  vars_files:
  - ../vars.yml
  vars:
    proxy:
      app_name: sketch
      name: sketchproxy
      project: default
      region: demo
    default_context: 'default/{{ openshift.master.cluster_hostname | regex_replace("\.", "-") }}:{{ openshift.master.api_port }}/system:admin'
  tasks:
  - command: oc project default

  - name: Set nodeselector for the default project to be region=infra
    shell: "oc get namespace default -o yaml  | sed -e '/  annotations:/a\\    openshift.io/node-selector: region=infra' | oc replace -f -"

  - name: Verify whether a router exists or not
    command: oadm router --dry-run --service-account=router
    register: router_out
    ignore_errors: true

  - name: Create router cert temporary directory
    file:
      dest: "~{{ ansible_ssh_user }}/router_certs"
      state: directory
    when: router_out | failed

  - name: Generate router certificate files
    command: "oadm create-server-cert --signer-cert=/etc/origin/master/ca.crt --signer-key=/etc/origin/master/ca.key --signer-serial=/etc/origin/master/ca.serial.txt --hostnames='*.{{ r53_wildcard_zone }}' --cert={{ r53_wildcard_zone }}.crt --key={{ r53_wildcard_zone }}.key"
    when: router_out | failed

  - name: Assemble router PEM
    assemble:
      dest: "~{{ ansible_ssh_user }}/{{ r53_wildcard_zone }}.pem"
      src: "~{{ ansible_ssh_user }}/router_certs"
    when: router_out | failed

  - name: Install router
    command: "oadm router --default-cert={{ r53_wildcard_zone }}.pem --credentials=/etc/origin/master/openshift-router.kubeconfig --service-account=router --images='{{ router_image_url }}'"
    when: router_out | failed

  - pause:
      seconds: 10

  - name: Scale router
    command: "oc scale --replicas={{ num_infra_nodes }} dc router"
    when: router_out | failed

  - name: Check whether a registry exists or not
    command: oadm registry --dry-run
    register: registry_out
    ignore_errors: true

  - name: Install registry
    command: "oadm registry --credentials=/etc/origin/master/openshift-registry.kubeconfig --images='{{ registry_image_url }}'"
    when: registry_out | failed

  - name: Find current projects list
    command: oc get projects
    register: projects

  - name: Create projects for internal users
    command: "oadm new-project {{ item.project }} --display-name='{{ item.project.title() }}' --node-selector='region={{ item.project }}' --admin='{{ item.user }}'"
    when: item.project not in projects.stdout
    with_items: users

  - command: oc project default

  - command: oc get dc -n {{ hexboard.namespace }}
    register: dcs_out
    failed_when: "hexboard.name not in dcs_out"
    ignore_errors: true

  - command: oc login -u {{ users.0.user }} -p {{ default_password }} --certificate-authority=/etc/origin/master/ca.crt
    when: dcs_out | failed

  - script: ../files/get_token.sh
    register: auth_token
    when: dcs_out | failed

  - set_fact:
      access_token: "{{ auth_token.stdout }}"
    when: dcs_out | failed

  - command: oc project {{ hexboard.namespace }}
    when: dcs_out | failed

  - template:
      dest: /root/hexboard_template.json
      src: ../templates/hexboard_template.json.j2
    when: dcs_out | failed

  - command: oc create -f /root/hexboard_template.json
    when: dcs_out | failed
    ignore_errors: true

  - command: oc start-build {{ hexboard.name }}
    when: dcs_out | failed

  - command: "oc config use-context {{ default_context }}"
    when: dcs_out | failed
